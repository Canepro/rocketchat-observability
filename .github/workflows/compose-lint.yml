name: Compose Lint

on:
  push:
  pull_request:

permissions:
  contents: read

concurrency:
  group: compose-lint-${{ github.ref }}
  cancel-in-progress: true

jobs:
  compose-lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        engine: [docker, podman]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Ensure .env.example exists
        run: |
          test -f .env.example || { echo "Missing .env.example at repo root"; exit 1; }

      - name: Ensure a compose file exists
        run: |
          test -f docker-compose.yml -o -f docker-compose.yaml -o -f compose.yml -o -f compose.yaml || { echo "Missing compose file"; exit 1; }

      - name: Install Podman (podman matrix only)
        if: matrix.engine == 'podman'
        run: |
          sudo apt-get update
          sudo apt-get install -y podman
          python3 -m ensurepip --upgrade || sudo apt-get install -y python3-pip

      - name: Show versions
        run: |
          if [ "${{ matrix.engine }}" = "docker" ]; then
            docker --version
            docker compose version
          else
            podman --version
            podman version
            podman info
            podman compose version || true
          fi

      - name: Check all required variables in .env.example are set
        run: |
          # Variables that are intentionally optional in the example file
          OPTIONAL_VARS='REG_TOKEN|GRAFANA_PATH'

          # Find keys with empty values (ignore comments and whitespace)
          missing_vars=$(grep -v '^\s*#' .env.example | grep '=' | sed 's/[[:space:]]*=[[:space:]]*/=/' | awk -F= '{ if ($2 == "" ) print $1 }')

          # Filter out allowed optional vars
          missing_vars=$(echo "$missing_vars" | grep -Ev "^(${OPTIONAL_VARS})$" || true)

          if [ -n "$missing_vars" ]; then
            echo "The following variables are unset in .env.example:" >&2
            echo "$missing_vars" >&2
            exit 1
          fi

      - name: Lint compose config with .env.example
        run: |
          if [ "${{ matrix.engine }}" = "docker" ]; then
            # Test individual compose files
            docker compose --env-file .env.example -f compose.database.yml config --quiet
            docker compose --env-file .env.example -f compose.monitoring.yml config --quiet
            docker compose --env-file .env.example -f compose.traefik.yml config --quiet
            # Test combined stack (the way it's actually used)
            docker compose --env-file .env.example -f compose.database.yml -f compose.monitoring.yml -f compose.traefik.yml -f compose.yml config --quiet
          else
            if podman compose version >/dev/null 2>&1; then
              # Test individual compose files
              podman compose --env-file .env.example -f compose.database.yml config --quiet
              podman compose --env-file .env.example -f compose.monitoring.yml config --quiet
              podman compose --env-file .env.example -f compose.traefik.yml config --quiet
              # Test combined stack (the way it's actually used)
              podman compose --env-file .env.example -f compose.database.yml -f compose.monitoring.yml -f compose.traefik.yml -f compose.yml config --quiet
            else
              python3 -m pip install --user podman-compose
              # Test individual compose files
              ~/.local/bin/podman-compose --env-file .env.example -f compose.database.yml config
              ~/.local/bin/podman-compose --env-file .env.example -f compose.monitoring.yml config
              ~/.local/bin/podman-compose --env-file .env.example -f compose.traefik.yml config
              # Test combined stack (the way it's actually used)
              ~/.local/bin/podman-compose --env-file .env.example -f compose.database.yml -f compose.monitoring.yml -f compose.traefik.yml -f compose.yml config
            fi
          fi
